// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(cuid())
  clerkUserId String? @unique
  name String?
  email String @unique
  password String? 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  orders Order[]
  reviews Review[]
  wishlistItems Wishlist[]
}

model Product {
  id String @id @default(cuid())
  name String 
  price Float
  originalPrice Float? // Original price before discount
  image String
  stock Int?
  soldCount Int @default(0) // Track number of units sold
  description String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  orderItems OrderItem[]
  reviews Review[]
  wishlistItems Wishlist[]
}

model Order {
  id String @id @default(cuid())
  userId String
  totalPrice Float
  status String @default("pending") // pending, paid, shipped, delivered, cancelled
  shippingAddress String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  orderItems OrderItem[]
}

model OrderItem {
  id String @id @default(cuid())
  orderId String
  productId String
  quantity Int
  price Float
  createdAt DateTime @default(now())
  
  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Review {
  id String @id @default(cuid())
  userId String
  productId String
  rating Int // 1-5 stars
  comment String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  @@unique([userId, productId]) // One review per user per product
}

model Wishlist {
  id String @id @default(cuid())
  userId String
  productId String
  createdAt DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  @@unique([userId, productId]) // One wishlist item per user per product
}